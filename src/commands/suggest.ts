import { Command } from "../typings/";
import db from "../db/init";
import {
  ButtonBuilder,
  ActionRowBuilder,
  GuildMember,
  ButtonStyle,
  TextChannel,
} from "discord.js";
import { doDef } from "../events/ready";

let Like = new ButtonBuilder()
  .setLabel("üëç | –•–æ—Ä–æ—à–∞—è –∏–¥–µ—è")
  .setStyle(ButtonStyle.Primary)
  .setCustomId("suggestion.like");
let Dislike = new ButtonBuilder()
  .setLabel("üëé | –ü–ª–æ—Ö–∞—è –∏–¥–µ—è")
  .setStyle(ButtonStyle.Danger)
  .setCustomId("suggestion.dislike");
let ShowStats = new ButtonBuilder()
  .setLabel("üìä | –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
  .setStyle(ButtonStyle.Primary)
  .setCustomId("suggestion.stats");

let row = new ActionRowBuilder<ButtonBuilder>().addComponents([Like, Dislike, ShowStats]);

export let command: Command = {
  name: "suggest",
  description: "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —á—Ç–æ-—Ç–æ –≤–∞—à–µ–º—É —Å–µ—Ä–≤–µ—Ä—É",
  category: "–°–æ—Ü–∏–∞–ª–Ω—ã–µ",
  emoji: "üí¨",
  options: [
    {
      name: "—Ç–µ–º–∞",
      description: "–¢–µ–º–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (3-100)",
      required: true,
      type: 3,
    },
    {
      name: "–æ–ø–∏—Å–∞–Ω–∏–µ",
      description: "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (3-750)",
      required: true,
      type: 3,
    },
  ],
  run: (interaction, client, f) => {
    db.promise()
      .query(
        `SELECT * FROM guildconfig WHERE guildID = '${interaction.guild!.id}'`
      )
      .then(async (d: any) => {
        let data = d[0][0];
        let theme = interaction.options.getString("—Ç–µ–º–∞", true);
        let details = interaction.options.getString("–æ–ø–∏—Å–∞–Ω–∏–µ", true);

        if (!data.suggestionChannel)
          return interaction.reply({
            embeds: [
              f.aembed(
                "–û—à–∏–±–∫–∞",
                `–ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π${(<GuildMember>interaction.member).permissions.has(
                  "Administrator"
                )
                  ? " (–ü–æ—Å–∫–æ–ª—å–∫—É –≤—ã –∞–¥–º–∏–Ω, –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /config)"
                  : "."
                }`,
                f.colors.error
              ),
            ],
            ephemeral: true,
          });

        if (data.suggestionChannel == 1)
          return interaction.reply({
            embeds: [
              f.aembed(
                `–û—à–∏–±–∫–∞`,
                `–ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –±—ã–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.`,
                f.colors.error
              ),
            ],
            ephemeral: true,
          });

        if (
          theme.length <= 3 ||
          details.length <= 3 ||
          theme.length >= 100 ||
          details.length >= 750
        )
          return interaction.reply({
            embeds: [
              f.aembed(
                "–û—à–∏–±–∫–∞",
                "–¢–µ–º–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –¥–ª–∏–Ω–µ —Å–∏–º–≤–æ–ª–æ–≤ (–¢–µ–º–∞: 3-100, –û–ø–∏—Å–∞–Ω–∏–µ: 3-750)",
                f.colors.error
              ),
            ],
            ephemeral: true,
          });

      (<TextChannel> await client.channels.cache.get(data.suggestionChannel)!).send({
          embeds: [
            new f.embed()
              .setColor(f.colors.default)
              .setTimestamp()
              .setTitle(`üí° | –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ "${theme}"`)
              .setDescription(details)
              .setFooter({
                text: `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${interaction.user!.tag}`,
                iconURL: client.user!.displayAvatarURL(),
              }),
          ],
          components: [row],
        }).then(m => {
          interaction.reply({
            embeds: [
              f.aembed(
                "–£—Å–ø–µ—à–Ω–æ",
                `–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª <#${data.suggestionChannel}>.`,
                f.colors.default
              ),
            ],
          });

          db.promise()
            .query(
              `INSERT IGNORE INTO suggestions(guildID, userSigned, author, date, messageID) VALUES ('${interaction.guild!.id}', '{}', '${interaction.user!.id}', '${new Date().toISOString()}', '${m.id}')`
            ).then((r: any) => {
              if (data.suggestionTimeActive != 0) {
                setTimeout(() => {
                  db.promise()
                    .query(
                      `SELECT * FROM suggestions WHERE suggestionID = '${r[0].insertId}'`
                    )
                    .then((d: any) => {
                      doDef(client, data, d[0][0]);
                    });
                }, data.suggestionTimeActive);
              }
            })
        });
      })
  },
};
